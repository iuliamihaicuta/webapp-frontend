/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationAddDTO,
  ApplicationDTOPagedResponseRequestResponse,
  ApplicationDTORequestResponse,
  ApplicationUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    ApplicationAddDTOFromJSON,
    ApplicationAddDTOToJSON,
    ApplicationDTOPagedResponseRequestResponseFromJSON,
    ApplicationDTOPagedResponseRequestResponseToJSON,
    ApplicationDTORequestResponseFromJSON,
    ApplicationDTORequestResponseToJSON,
    ApplicationUpdateDTOFromJSON,
    ApplicationUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiApplicationAddPostRequest {
    applicationAddDTO?: ApplicationAddDTO;
}

export interface ApiApplicationDeleteIdDeleteRequest {
    id: string;
}

export interface ApiApplicationGetByIdIdGetRequest {
    id: string;
}

export interface ApiApplicationGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiApplicationUpdatePutRequest {
    applicationUpdateDTO?: ApplicationUpdateDTO;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     */
    async apiApplicationAddPostRaw(requestParameters: ApiApplicationAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationAddDTOToJSON(requestParameters['applicationAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationAddPost(requestParameters: ApiApplicationAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiApplicationAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiApplicationDeleteIdDeleteRaw(requestParameters: ApiApplicationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiApplicationDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationDeleteIdDelete(requestParameters: ApiApplicationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiApplicationDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiApplicationGetByIdIdGetRaw(requestParameters: ApiApplicationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiApplicationGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationGetByIdIdGet(requestParameters: ApiApplicationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationDTORequestResponse> {
        const response = await this.apiApplicationGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiApplicationGetPageGetRaw(requestParameters: ApiApplicationGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationGetPageGet(requestParameters: ApiApplicationGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationDTOPagedResponseRequestResponse> {
        const response = await this.apiApplicationGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiApplicationUpdatePutRaw(requestParameters: ApiApplicationUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationUpdateDTOToJSON(requestParameters['applicationUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationUpdatePut(requestParameters: ApiApplicationUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiApplicationUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
