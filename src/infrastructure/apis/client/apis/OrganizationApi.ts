/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganizationAddDTO,
  OrganizationDTOPagedResponseRequestResponse,
  OrganizationDTORequestResponse,
  OrganizationDetailsDTORequestResponse,
  OrganizationUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    OrganizationAddDTOFromJSON,
    OrganizationAddDTOToJSON,
    OrganizationDTOPagedResponseRequestResponseFromJSON,
    OrganizationDTOPagedResponseRequestResponseToJSON,
    OrganizationDTORequestResponseFromJSON,
    OrganizationDTORequestResponseToJSON,
    OrganizationDetailsDTORequestResponseFromJSON,
    OrganizationDetailsDTORequestResponseToJSON,
    OrganizationUpdateDTOFromJSON,
    OrganizationUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiOrganizationAddPostRequest {
    organizationAddDTO?: OrganizationAddDTO;
}

export interface ApiOrganizationDeleteIdDeleteRequest {
    id: string;
}

export interface ApiOrganizationGetByIdIdGetRequest {
    id: string;
}

export interface ApiOrganizationGetOrganizationDetailsByIdDetailsIdGetRequest {
    id: string;
}

export interface ApiOrganizationGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiOrganizationUpdatePutRequest {
    organizationUpdateDTO?: OrganizationUpdateDTO;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     */
    async apiOrganizationAddPostRaw(requestParameters: ApiOrganizationAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationAddDTOToJSON(requestParameters['organizationAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationAddPost(requestParameters: ApiOrganizationAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrganizationAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrganizationDeleteIdDeleteRaw(requestParameters: ApiOrganizationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrganizationDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationDeleteIdDelete(requestParameters: ApiOrganizationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrganizationDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrganizationGetByIdIdGetRaw(requestParameters: ApiOrganizationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrganizationGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationGetByIdIdGet(requestParameters: ApiOrganizationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDTORequestResponse> {
        const response = await this.apiOrganizationGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrganizationGetOrganizationDetailsByIdDetailsIdGetRaw(requestParameters: ApiOrganizationGetOrganizationDetailsByIdDetailsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDetailsDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrganizationGetOrganizationDetailsByIdDetailsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/GetOrganizationDetailsById/details/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDetailsDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationGetOrganizationDetailsByIdDetailsIdGet(requestParameters: ApiOrganizationGetOrganizationDetailsByIdDetailsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDetailsDTORequestResponse> {
        const response = await this.apiOrganizationGetOrganizationDetailsByIdDetailsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrganizationGetPageGetRaw(requestParameters: ApiOrganizationGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationGetPageGet(requestParameters: ApiOrganizationGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDTOPagedResponseRequestResponse> {
        const response = await this.apiOrganizationGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrganizationUpdatePutRaw(requestParameters: ApiOrganizationUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Organization/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationUpdateDTOToJSON(requestParameters['organizationUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrganizationUpdatePut(requestParameters: ApiOrganizationUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrganizationUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
